/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as StoreroutImport } from './routes/storerout'
import { Route as StoreAnalytcsImport } from './routes/storeAnalytcs'
import { Route as RefillInsightsImport } from './routes/refillInsights'
import { Route as ProductdetailsrootImport } from './routes/productdetailsroot'
import { Route as PlaceOrderImport } from './routes/placeOrder'
import { Route as OverviewRouteImport } from './routes/overviewRoute'
import { Route as LandingImport } from './routes/landing'
import { Route as CompareImport } from './routes/compare'
import { Route as AuthImport } from './routes/auth'
import { Route as RefillBalanceRequestRouteImport } from './routes/RefillBalanceRequestRoute'
import { Route as ProtectedRoutesAuthProtectedRouteImport } from './routes/protectedRoutes/AuthProtectedRoute'

// Create/Update Routes

const StoreroutRoute = StoreroutImport.update({
  id: '/storerout',
  path: '/storerout',
  getParentRoute: () => rootRoute,
} as any)

const StoreAnalytcsRoute = StoreAnalytcsImport.update({
  id: '/storeAnalytcs',
  path: '/storeAnalytcs',
  getParentRoute: () => rootRoute,
} as any)

const RefillInsightsRoute = RefillInsightsImport.update({
  id: '/refillInsights',
  path: '/refillInsights',
  getParentRoute: () => rootRoute,
} as any)

const ProductdetailsrootRoute = ProductdetailsrootImport.update({
  id: '/productdetailsroot',
  path: '/productdetailsroot',
  getParentRoute: () => rootRoute,
} as any)

const PlaceOrderRoute = PlaceOrderImport.update({
  id: '/placeOrder',
  path: '/placeOrder',
  getParentRoute: () => rootRoute,
} as any)

const OverviewRouteRoute = OverviewRouteImport.update({
  id: '/overviewRoute',
  path: '/overviewRoute',
  getParentRoute: () => rootRoute,
} as any)

const LandingRoute = LandingImport.update({
  id: '/landing',
  path: '/landing',
  getParentRoute: () => rootRoute,
} as any)

const CompareRoute = CompareImport.update({
  id: '/compare',
  path: '/compare',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRoute,
} as any)

const RefillBalanceRequestRouteRoute = RefillBalanceRequestRouteImport.update({
  id: '/RefillBalanceRequestRoute',
  path: '/RefillBalanceRequestRoute',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedRoutesAuthProtectedRouteRoute =
  ProtectedRoutesAuthProtectedRouteImport.update({
    id: '/protectedRoutes/AuthProtectedRoute',
    path: '/protectedRoutes/AuthProtectedRoute',
    getParentRoute: () => rootRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/RefillBalanceRequestRoute': {
      id: '/RefillBalanceRequestRoute'
      path: '/RefillBalanceRequestRoute'
      fullPath: '/RefillBalanceRequestRoute'
      preLoaderRoute: typeof RefillBalanceRequestRouteImport
      parentRoute: typeof rootRoute
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/compare': {
      id: '/compare'
      path: '/compare'
      fullPath: '/compare'
      preLoaderRoute: typeof CompareImport
      parentRoute: typeof rootRoute
    }
    '/landing': {
      id: '/landing'
      path: '/landing'
      fullPath: '/landing'
      preLoaderRoute: typeof LandingImport
      parentRoute: typeof rootRoute
    }
    '/overviewRoute': {
      id: '/overviewRoute'
      path: '/overviewRoute'
      fullPath: '/overviewRoute'
      preLoaderRoute: typeof OverviewRouteImport
      parentRoute: typeof rootRoute
    }
    '/placeOrder': {
      id: '/placeOrder'
      path: '/placeOrder'
      fullPath: '/placeOrder'
      preLoaderRoute: typeof PlaceOrderImport
      parentRoute: typeof rootRoute
    }
    '/productdetailsroot': {
      id: '/productdetailsroot'
      path: '/productdetailsroot'
      fullPath: '/productdetailsroot'
      preLoaderRoute: typeof ProductdetailsrootImport
      parentRoute: typeof rootRoute
    }
    '/refillInsights': {
      id: '/refillInsights'
      path: '/refillInsights'
      fullPath: '/refillInsights'
      preLoaderRoute: typeof RefillInsightsImport
      parentRoute: typeof rootRoute
    }
    '/storeAnalytcs': {
      id: '/storeAnalytcs'
      path: '/storeAnalytcs'
      fullPath: '/storeAnalytcs'
      preLoaderRoute: typeof StoreAnalytcsImport
      parentRoute: typeof rootRoute
    }
    '/storerout': {
      id: '/storerout'
      path: '/storerout'
      fullPath: '/storerout'
      preLoaderRoute: typeof StoreroutImport
      parentRoute: typeof rootRoute
    }
    '/protectedRoutes/AuthProtectedRoute': {
      id: '/protectedRoutes/AuthProtectedRoute'
      path: '/protectedRoutes/AuthProtectedRoute'
      fullPath: '/protectedRoutes/AuthProtectedRoute'
      preLoaderRoute: typeof ProtectedRoutesAuthProtectedRouteImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/RefillBalanceRequestRoute': typeof RefillBalanceRequestRouteRoute
  '/auth': typeof AuthRoute
  '/compare': typeof CompareRoute
  '/landing': typeof LandingRoute
  '/overviewRoute': typeof OverviewRouteRoute
  '/placeOrder': typeof PlaceOrderRoute
  '/productdetailsroot': typeof ProductdetailsrootRoute
  '/refillInsights': typeof RefillInsightsRoute
  '/storeAnalytcs': typeof StoreAnalytcsRoute
  '/storerout': typeof StoreroutRoute
  '/protectedRoutes/AuthProtectedRoute': typeof ProtectedRoutesAuthProtectedRouteRoute
}

export interface FileRoutesByTo {
  '/RefillBalanceRequestRoute': typeof RefillBalanceRequestRouteRoute
  '/auth': typeof AuthRoute
  '/compare': typeof CompareRoute
  '/landing': typeof LandingRoute
  '/overviewRoute': typeof OverviewRouteRoute
  '/placeOrder': typeof PlaceOrderRoute
  '/productdetailsroot': typeof ProductdetailsrootRoute
  '/refillInsights': typeof RefillInsightsRoute
  '/storeAnalytcs': typeof StoreAnalytcsRoute
  '/storerout': typeof StoreroutRoute
  '/protectedRoutes/AuthProtectedRoute': typeof ProtectedRoutesAuthProtectedRouteRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/RefillBalanceRequestRoute': typeof RefillBalanceRequestRouteRoute
  '/auth': typeof AuthRoute
  '/compare': typeof CompareRoute
  '/landing': typeof LandingRoute
  '/overviewRoute': typeof OverviewRouteRoute
  '/placeOrder': typeof PlaceOrderRoute
  '/productdetailsroot': typeof ProductdetailsrootRoute
  '/refillInsights': typeof RefillInsightsRoute
  '/storeAnalytcs': typeof StoreAnalytcsRoute
  '/storerout': typeof StoreroutRoute
  '/protectedRoutes/AuthProtectedRoute': typeof ProtectedRoutesAuthProtectedRouteRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/RefillBalanceRequestRoute'
    | '/auth'
    | '/compare'
    | '/landing'
    | '/overviewRoute'
    | '/placeOrder'
    | '/productdetailsroot'
    | '/refillInsights'
    | '/storeAnalytcs'
    | '/storerout'
    | '/protectedRoutes/AuthProtectedRoute'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/RefillBalanceRequestRoute'
    | '/auth'
    | '/compare'
    | '/landing'
    | '/overviewRoute'
    | '/placeOrder'
    | '/productdetailsroot'
    | '/refillInsights'
    | '/storeAnalytcs'
    | '/storerout'
    | '/protectedRoutes/AuthProtectedRoute'
  id:
    | '__root__'
    | '/RefillBalanceRequestRoute'
    | '/auth'
    | '/compare'
    | '/landing'
    | '/overviewRoute'
    | '/placeOrder'
    | '/productdetailsroot'
    | '/refillInsights'
    | '/storeAnalytcs'
    | '/storerout'
    | '/protectedRoutes/AuthProtectedRoute'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  RefillBalanceRequestRouteRoute: typeof RefillBalanceRequestRouteRoute
  AuthRoute: typeof AuthRoute
  CompareRoute: typeof CompareRoute
  LandingRoute: typeof LandingRoute
  OverviewRouteRoute: typeof OverviewRouteRoute
  PlaceOrderRoute: typeof PlaceOrderRoute
  ProductdetailsrootRoute: typeof ProductdetailsrootRoute
  RefillInsightsRoute: typeof RefillInsightsRoute
  StoreAnalytcsRoute: typeof StoreAnalytcsRoute
  StoreroutRoute: typeof StoreroutRoute
  ProtectedRoutesAuthProtectedRouteRoute: typeof ProtectedRoutesAuthProtectedRouteRoute
}

const rootRouteChildren: RootRouteChildren = {
  RefillBalanceRequestRouteRoute: RefillBalanceRequestRouteRoute,
  AuthRoute: AuthRoute,
  CompareRoute: CompareRoute,
  LandingRoute: LandingRoute,
  OverviewRouteRoute: OverviewRouteRoute,
  PlaceOrderRoute: PlaceOrderRoute,
  ProductdetailsrootRoute: ProductdetailsrootRoute,
  RefillInsightsRoute: RefillInsightsRoute,
  StoreAnalytcsRoute: StoreAnalytcsRoute,
  StoreroutRoute: StoreroutRoute,
  ProtectedRoutesAuthProtectedRouteRoute:
    ProtectedRoutesAuthProtectedRouteRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/RefillBalanceRequestRoute",
        "/auth",
        "/compare",
        "/landing",
        "/overviewRoute",
        "/placeOrder",
        "/productdetailsroot",
        "/refillInsights",
        "/storeAnalytcs",
        "/storerout",
        "/protectedRoutes/AuthProtectedRoute"
      ]
    },
    "/RefillBalanceRequestRoute": {
      "filePath": "RefillBalanceRequestRoute.tsx"
    },
    "/auth": {
      "filePath": "auth.tsx"
    },
    "/compare": {
      "filePath": "compare.tsx"
    },
    "/landing": {
      "filePath": "landing.tsx"
    },
    "/overviewRoute": {
      "filePath": "overviewRoute.tsx"
    },
    "/placeOrder": {
      "filePath": "placeOrder.tsx"
    },
    "/productdetailsroot": {
      "filePath": "productdetailsroot.tsx"
    },
    "/refillInsights": {
      "filePath": "refillInsights.tsx"
    },
    "/storeAnalytcs": {
      "filePath": "storeAnalytcs.tsx"
    },
    "/storerout": {
      "filePath": "storerout.tsx"
    },
    "/protectedRoutes/AuthProtectedRoute": {
      "filePath": "protectedRoutes/AuthProtectedRoute.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
