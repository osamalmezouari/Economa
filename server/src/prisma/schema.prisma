generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum DiscountType {
  Percentage
  Flat
}

enum OrderStatus {
  Paid
  Completed
}

enum TransactionType {
  purchase
  sale
  return
  adjustment
}

model Category {
  id          String    @id
  name        String    @unique
  svgLink     String
  description String?
  products    Product[]
}

model Coupon {
  id                  String       @id
  code                String       @unique
  description         String?
  discount_type       DiscountType
  discount_value      Float
  max_usage           Int?         @default(1)
  expiration_date     DateTime?
  minimum_order_value Float?
  created_at          DateTime     @default(now())
  updated_at          DateTime     @updatedAt
  users               User[]       @relation("UsersCoupons")
  orders              Order[]
}

model Permission {
  id          String           @id
  name        String           @unique
  description String?
  roles       RolePermission[]
}

model Product {
  id               String             @id
  name             String
  description      String?
  price            Float
  categoryId       String
  cost_price       Float
  discount         Int?
  category         Category           @relation(fields: [categoryId], references: [id])
  created_at       DateTime           @default(now())
  updated_at       DateTime           @updatedAt
  gallery          Gallery[]
  orderItems       OrderItem[]
  reviews          ProductReview[]
  shoppingCart     ShoppingCart[]
  wishList         Wishlist[]
  unitId           String
  Units            Units              @relation(fields: [unitId], references: [id])
  StockTransaction StockTransaction[]
}

model StockTransaction {
  id              Int             @id @default(autoincrement())
  productId       String
  transactionType TransactionType
  quantity        Int
  unitCost        Decimal?        @db.Decimal(10, 2) // Optional, only for 'purchase' type
  transactionDate DateTime        @default(now())

  product Product @relation(fields: [productId], references: [id])
}

model Gallery {
  id        String   @id
  productId String
  imageUrl  String
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Role {
  id          String           @id
  name        String           @unique
  description String?
  users       User[]
  permissions RolePermission[]
}

model RolePermission {
  roleId       String
  permissionId String
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
}

model User {
  id                   String                 @id
  name                 String?
  email                String                 @unique
  password             String
  phoneNumber          String?
  address              String?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  lastLogin            DateTime?
  roleId               String
  role                 Role                   @relation(fields: [roleId], references: [id])
  notifications        Notification[]
  orders               Order[]
  reviews              ProductReview[]
  shoppingCart         ShoppingCart[]
  wishList             Wishlist[]
  balance              Balance?
  refillBalanceRequest refillBalanceRequest[]
  Coupon               Coupon[]               @relation("UsersCoupons")
}

model Balance {
  id        String   @id
  userId    String   @unique
  Balance   Float    @default(0)
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model refillBalanceRequest {
  id        String   @id
  userId    String
  amount    Float
  file      String   @db.Text
  status    String   @default("pending")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id
  userId    String?
  type      String?
  message   String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Order {
  id          String      @id
  userId      String
  couponId    String?
  status      String
  totalAmount Float
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  coupon      Coupon?     @relation(fields: [couponId], references: [id], onDelete: SetNull)
  orderItems  OrderItem[]
  payment     Payment?
}

model OrderItem {
  id        String  @id
  orderId   String
  productId String
  quantity  Int
  unitPrice Float
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Payment {
  id            String   @id
  orderId       String   @unique
  amount        Float
  paymentDate   DateTime @default(now())
  paymentStatus String   @default("paid")
  order         Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model ProductReview {
  id         String   @id
  userId     String?
  productId  String
  rating     Int
  reviewText String?
  createdAt  DateTime @default(now())
  user       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

model ShoppingCart {
  id        String   @id
  userId    String
  productId String
  quantity  Int      @default(1)
  addedAt   DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

model Wishlist {
  id        String   @id
  userId    String
  productId String
  addedAt   DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

model Units {
  id       String    @id
  name     String    @unique
  products Product[]
}
